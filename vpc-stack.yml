Description: Creates VPC and required components of VPC
Parameters:
  VPCCIDR:
    Type: String
    Description: CIDR block should be used to create the VPC (e.g. 172.21.1.0/24)
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 172.21.1.0/24)
  PublicSubnet1CIDR:
    Type: String
    Description: CIDR block should be used to create the public subnet in AZ1 (e.g. 172.21.1.0/26)
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 172.21.1.0/26)
  PublicSubnet2CIDR:
    Type: String
    Description: CIDR block should be used to create the public subnet in AZ2 (e.g. 172.21.1.64/26)
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 172.21.1.64/26)
  PublicSubnet3CIDR:
    Type: String
    Description: CIDR block should be used to create the public subnet in AZ3 (e.g. 172.21.1.64/26)
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 172.21.1.64/26)
  PrivateSubnet1CIDR:
    Type: String
    Description: CIDR block should be used to create the public subnet in AZ1 (e.g. 172.21.1.128/26)
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 172.21.1.128/26)
  PrivateSubnet2CIDR:
    Type: String
    Description: CIDR block should be used to create the public subnet in AZ2 (e.g. 172.21.1.192/26)
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 172.21.1.192/26)
  PrivateSubnet3CIDR:
    Type: String
    Description: CIDR block should be used to create the public subnet in AZ3 (e.g. 172.21.1.192/26)
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x. (e.g. 172.21.1.192/26)
  TagPrefix:
    Type: String
    Description: Enter Prefix that should be used for Tags.
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Ref TagPrefix
  MyIGW:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
      - Key: Name
        Value: !Sub ${TagPrefix}-IGW
  MyIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: 
      - MyVPC
      - MyIGW
    Properties:
      InternetGatewayId: !Ref MyIGW
      VpcId: !Ref MyVPC 
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: MyVPC
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${TagPrefix}-PublicRouteTable
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: MyVPC
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub ${TagPrefix}-PrivateRouteTable
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref MyIGW      
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRouteTable
      GatewayId: !Ref MyIGW      
  PublicSubnet1:
    DependsOn: MyVPC
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: !Sub ${TagPrefix}-PublicSubnet1 
  PublicSubnet2:
    DependsOn: MyVPC
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: false
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: !Sub ${TagPrefix}-PublicSubnet2
  PublicSubnet3:
    DependsOn: MyVPC
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs ]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: false
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: !Sub ${TagPrefix}-PublicSubnet3
  PrivateSubnet1:
    DependsOn: MyVPC
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: !Sub ${TagPrefix}-PrivateSubnet1
  PrivateSubnet2:
    DependsOn: MyVPC
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: !Sub ${TagPrefix}-PrivateSubnet2
  PrivateSubnet3:
    DependsOn: MyVPC
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: !Sub ${TagPrefix}-PrivateSubnet3
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: 
      - PublicRouteTable
      - PublicSubnet1
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: 
      - PublicRouteTable
      - PublicSubnet2
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: 
      - PublicRouteTable
      - PublicSubnet3
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: 
      - PrivateRouteTable
      - PrivateSubnet1
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: 
      - PrivateRouteTable
      - PrivateSubnet2
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: 
      - PrivateRouteTable
      - PrivateSubnet3
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3
Outputs:
  VPCID:
    Description: VPCID
    Value: !Ref MyVPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'
  PublicSubnets:
    Description: Subnet ids i
    Value: !Join 
        - ','
        - - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PublicSubnet3
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnets'
  PrivateSubnets:
    Description: Subnet ids i
    Value: !Join 
        - ','
        - - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnets'
  